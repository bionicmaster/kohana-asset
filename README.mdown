# Kohana 3 Asset Helper

This is a simple asset helper similar to Ruby on Rails' `javascript_include_tag` and `stylesheet_link_tag`. 
It outputs HTML tags for multiple asset files and automatically concatenates them into one file.

Current only `<script>` and `<style>` tags are supported. Minification is planned.
	
## Public Methods

Two static methods are offered as factories for instantiating new `Asset` classes. Since an instantiated object doesn't do much anyway, it's recommended to use these methods. 

	/**
	 * Generates javascript tags based on the paths provided. 
	 * Caches automatically. File extensions (.js) are optional.
	 *  
	 * @param array 	$files		The files to generate
	 * @param string	$prefix 	A string to prefix to the cache file
	 * @return string
	 */
	public static function javascripts(array $files, $prefix = NULL);
	
	/**
	 * @param array 	$files		The files to generate
	 * @param string	$prefix 	A string to prefix to the cache file
	 * @return string
	 */
	public static function stylesheets(array $files, $prefix = NULL);
	
## Usage

In your view you can call something like the following. Note that the `.js` extension is not provided on the path (it is optional):

    <?php echo asset::javascripts(array(
    	'some/javascript/file',
    	'another/javascript/file',
    ), 'prefix') ?>

Would output the following (if caching is disabled):

    <script type="text/javascript" src="/javascripts/some/javascript/file.js?1257384059"></script>
    <script type="text/javascript" src="/javascripts/another/javascript/file.js?1257384059"></script>

And if caching were enabled, and the module is capable of writing to the filesystem it would output:

    <script type="text/javascript" src="/cache/prefix1257384059.js"></script>

Note that the second argument is an option cache file prefix. This is prepended to the cached file 
so that multiple `asset::javascripts()` calls can be made without the potential for them overwriting 
each other's cache files. Just use different prefixes.

If you have asset hosts configured, a random one will be used for each tag outputted.

That's all! Caching, cache expiration, and HTML generation is transparent and simple.

## Configuration

Currently, it is possible to configure quite a few options, specifically those pertaining to filesystem paths.

Take a look at `config/assets.php` for a complete explanation of the properties.

## Edge Cases

The following are examples of files that are acceptable to pass in the `$files` array but are handled in a special way:

   * **Files containing `://`**, such as `http://domain.com/javascripts/file.js` will
     not be processed. The only thing that will be changed is that an extension 
     will be added if it doesn't already have one.
   * **Files beginning with a `/`**, such as `/some/javascript/file` will not have the 
     `prefix` configuration option added to them.
   * **Files that can't be found on the filesystem** will, quite obviously, never be cached. 
     The file will, instead, be outputted as its own HTML tag. The file will still be processed
     according to the normal rules (a `prefix` and `extension`, random `hosts` will be added) and 
     to the rules above.
